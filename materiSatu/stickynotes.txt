<h1>JavaScript Output</h1>

JavaScript bisa "Tampilin" data dengan banyak cara

Misalkan :
    1. Nulis ke elemen dalam HTML menggunakan innerHTML
    2. Nulis ke output HTML menggunakan document.write()
    3. Nulis ke alert box menggunakan window.alert()
    4. Nulis ke console browser menggunakan console.log()

`````````````````````````````````````````````````````````````````````````````````````````````````````````

<h1>JavaScript Statement</h1>

    1. Sebuah Statement tidak harus diakhiri dengan semicolon(;) jika
    hanya 1 line

    2. JS mengabaikan mutiple spaces

    3. Blok program ditulis dalam {} (kurung kurawal)

    4. jika ingin menulis statement dalam 2 baris maka penggal setelah operator

    Misalkan :

        document.getElementById("demo").innerHTML =
            "Hello Dolly!";

        dari contoh diatas nampak enter terjadi setelah tanda "="

`````````````````````````````````````````````````````````````````````````````````````````````````````````

<h1>JavaScript Variables</h1>
    
    var : variable jadul

    let/const : variable terbaru, let untuk yang bisa di redeclare misal x = 4, kalau
    const lebih ke sesuatu yang tetap misal phi = 3.14

    Misalkan : 
    x = 5
    const pi = 3.14 (Constant declaration)
    let x; (Declaration without assignment, x = undefined)
    let y = 5; (Declaration as well as Assignment) 

`````````````````````````````````````````````````````````````````````````````````````````````````````````

<h1>JavaScript Datatype</h1>

JS variable Datatype di spesifikasikan ketika assignment

    Misalkan :

    Tipe data Number : x = 34 atau y = 34.2 bisa make desimal atau gak tergantung assignment

    String : bisa di concat dengan operasi "+", string biasa dihimpit dengan ", ', atau bahkan `

`````````````````````````````````````````````````````````````````````````````````````````````````````````

<h1>JavaScript Explisit casting atau merubah tipe data</h1>

    int, integer "operasi" atau fungsi yang dilakukan untuk mengubah ke integer = parseInt()
    bool, boolean = Boolean()
    float, double, real = parseFloat()
    string = String()
    Array = split()

    Misalkan : 
        n = 3.14
        x = parseInt(n)
        document.write(x)

`````````````````````````````````````````````````````````````````````````````````````````````````````````

<h1>JavaScript Array</h1>

Array biasa di declare dengan const

Misalkan : const array = [enzo, saski, gwen, rona];

walau menggunakan const, bukan berarti tidak bisa sama sekali dilakukan operasi

Array tetap bisa di operasikan, misal di ubah elemen index tertentu, dimasukan elemen baru di index terakhir
atau bahkan menghapus index terakhir

    misal: 
        fruits[0] = "lemon";       // Ubah elemen pertama
        fruits.push("grape");      // Tambah elemen baru
        fruits.pop();              // Hapus elemen terakhir


Namun jelas karena dideclare dengan const maka tidak bisa di replace, 
    
    misal: array sebelumnya di assign dengan array baru

        const array = ["enzo", "saski", "gwen", "rona"]; 

        array = ["nadiva", "maysa", "anisa"];         // nah ini gabisa, assign array baru ke array di atasnya

Index array dimulai dari 0 di JS, Jadi kalau mau mengakses elemen terakhir bisa dengan cara panjang array - 1

    misal: console.log(array[array.lenght - 1]);

Array selalu pakai index angka di JS, jadi kalau index diberikan nama maka akan menjadi objek

    misal :
        const array = ["enzo", "saski", "gwen", "rona"] = adalah sebuah array
            cara akses indexnya dengan cara array[0]

        const enzo = {nama: "Enzokulin"; usia: 21; pacar: "Gwen"} = adalah sebuah object
            cara akses "index" nya dengan cara enzo.nama

`````````````````````````````````````````````````````````````````````````````````````````````````````````

<h1>JavaScript Looping Array</h1>

array bisa di akses indexnya dengan loop, misal

    for(i = 0; i < array.lenght; i++){
        document.write(array[i])
    }

atau bisa dengan foreach

    array.forEach(function(x){
            console.log(x);
        }
    );

atau lebih lengkap bisa seperti ini

    fruits.forEach(function(value, index, array) {
    console.log("Index:", index, "â†’", value);
    });

`````````````````````````````````````````````````````````````````````````````````````````````````````````

<h1>JavaScript Node Type</h1>

JavaScript menyediakan properti .nodeType untuk mengetahui tipe node.
Nilainya berupa angka (constant) sesuai dengan jenis node.

    Node Type	        Angka	    Contoh
    ELEMENT_NODE	    1	        <div>, <p>, <h1>
    ATTRIBUTE_NODE	    2	        class="title" (jarang dipakai langsung)
    TEXT_NODE	        3	        isi teks dalam elemen: "Hello World"
    COMMENT_NODE	    8	        <!-- ini komentar -->
    DOCUMENT_NODE	    9	        document (root DOM)
    DOCUMENT_TYPE_NODE	10	        <!DOCTYPE html>

Untuk contoh:

    <div id="contoh">Halo <b>Enzo</b></div>

    console.log(elemen.nodeType);            // 1 (ELEMENT_NODE)
    console.log(elemen.firstChild.nodeType); // 3 (TEXT_NODE: "Halo ")
    console.log(elemen.lastChild.nodeType);  // 1 (ELEMENT_NODE: <b>)

`````````````````````````````````````````````````````````````````````````````````````````````````````````

<h1>JavaScript HTML DOM</h1>

Apasih fungsi DOM?

    DOM adalah acuan atau standart dalam mengakses, mengubah, menambah, dan menghapus elemen didalam HTML

Setiap elemen HTML didefine sebagai objek alias memiliki properties dan methods

Properti didalamnya memiliki value yang bisa di ambil atau diubah

    Misalkan: 
        document.getElementById("judul").innerHTML = "Halo Enzo!";

Methods adalah aksi yang bisa di lakukan pada objek, misal mengubah atau menghapus elemen HTML

    Misalkan: 
        let p = document.createElement("p");    // buat <p>
        document.body.appendChild(p);           // tambahkan ke body

JS DOM bisa apa aja?

1. JavaScript bisa mengubah elemen HTML

    <p id="demo">Teks lama</p>

    <script>
    document.getElementById("demo").innerHTML = "Teks baru dari JS!";
    </script>

2. Mengubah atribut HTML

    <img id="foto" src="lama.jpg">

    <script>
    document.getElementById("foto").src = "baru.jpg";
    </script>

3. Mengubah CSS style

    <p id="styleme">Halo Enzo</p>

    <script>
    document.getElementById("styleme").style.color = "red";
    document.getElementById("styleme").style.fontSize = "20px";
    </script>

4. Menghapus elemen / atribut

    <p id="hapus">Ini akan dihapus</p>

    <script>
    document.getElementById("hapus").remove(); // hapus elemen remove() adalah fungsi bawaan JS
    </script>

5. Menambahkan elemen baru

    <div id="container"></div>

    <script>
    let p = document.createElement("p");       // buat elemen <p>
    p.innerHTML = "Paragraf baru";
    document.getElementById("container").appendChild(p);
    </script>

6. Merespons event

    <button id="klik">Klik aku</button>

    <script>
    document.getElementById("klik").onclick = function() {
    alert("Tombol diklik!");
    }
    </script>

7. Membuat event baru

    <button id="btn">Klik aku</button>
    <script>
    let eventBaru = new Event("customEvent");

    // pasang listener
    document.getElementById("btn").addEventListener("customEvent", function() {
    alert("Event custom dipicu!");
    });

    // jalankan event
    document.getElementById("btn").dispatchEvent(eventBaru);
    </script>

`````````````````````````````````````````````````````````````````````````````````````````````````````````

<h1>JavaScript Finding HTML Element</h1>

Kita bisa mencari elemen dengan id, tag, class, css(querySelector), atau object
    Misalkan : 
        let judul = document.getElementById("header");
        let paragraf = document.getElementsByTagName("p");
        let items = document.getElementsByClassName("menu-item");
        let pertama = document.querySelector(".menu li");           // elemen pertama li dalam .menu
        let semua   = document.querySelectorAll(".menu li");        // semua li dalam .menu
        document.body;    // seluruh <body>
        document.forms;   // semua <form>
        document.images;  // semua <img>
        document.links;   // semua <a>

